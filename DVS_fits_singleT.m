clear all; 
close all;
clc;

% Code by Paul Michalski, paulmichalski@monash.edu, 2023
% Written in MATLAB R2022b

% This script fits sorption and desorption isotherm data to the Oswin, BET,
% GAB, Halsey, Chen, Chung-Pfost, Henderson, Caurie, Sips, and
% Iglesias-Chirife models for a single temperature

excelname = 'DVS_example_export.xlsx'; % DVS_example_export.xls generated by instrument software

% Adjust range based on RH measured. Column 1 is water activity, 2 is
% sorption moisture content (d.b.) and 3 is desorption moisture content
% (d.b.)
[~, ~, raw] = xlsread(excelname,'Iso Report','D15:F26');
i_fit = 0;
% Before running, reduce data here as necessary if eqbm not reached. aw and
% M must be same dimension
M_sorp = cell2mat(raw(:,2))/100; % Soprtion % change in mass relative to end of 0% stage
M_desorp = cell2mat(raw(:,3))/100; % Desoprtion % change in mass relative to end of 0% stage
aw_sorp = cell2mat(raw(:,1))/100; % Target P/P0
aw_desorp = cell2mat(raw(:,1))/100; % Target P/P0

% Linear ranges to interpolate with fit (avoid water activity of 0 to not
% have undefined values)
gradation = 400;
aw_lb = 0.002;
aw_ub = 0.95;
aw_lin = linspace(aw_lb,aw_ub,gradation);
M_lin = linspace(M_sorp(1),M_sorp(end),gradation);

resnorm = NaN(1,1); % Initialise
R = 8.314; % Universal gas constant [J/mol.K]
T = 298; % Measurement temperature [K]

% Insert measured data to figure 
subplot(1,2,1)
plot(aw_sorp,M_sorp,'ko')
hold on

figure(1)
subplot(1,2,2)
plot(aw_desorp,M_desorp,'ko')
hold on

%% Oswin
i_fit = i_fit+1; % Iterate fit index
fitname{i_fit} = {'Oswin'}; % Name of fitting model
X0 = [0.05, 2]; % initial guesses for k, n
lb = [0.001, 0.5]; % lower bounds for k, n
ub = [1, 8]; % upper bounds for k, n

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[Oswin_x_s,resnorm(1,i_fit),residual_s(:,i_fit)] = lsqnonlin(@Oswin,X0,lb,ub,[],aw_sorp,M_sorp); % Solve nonlinear least-squares (nonlinear data-fitting) problems
[Oswin_x_d,resnorm(2,i_fit),residual_d(:,i_fit)] = lsqnonlin(@Oswin,X0,lb,ub,[],aw_desorp,M_desorp); % Solve nonlinear least-squares (nonlinear data-fitting) problems
Oswin_k_s = Oswin_x_s(1);
Oswin_n_s = Oswin_x_s(2);
Oswin_k_d = Oswin_x_d(1);
Oswin_n_d = Oswin_x_d(2);
parameter{1,i_fit} = {Oswin_x_s};
parameter{2,i_fit} = {Oswin_x_d};
parameter{3,i_fit} = {'k','n'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot(aw_lin,Oswin_k_s*(aw_lin./(1-aw_lin)).^Oswin_n_s,'k-')
figure(1)
subplot(1,2,2)
plot(aw_lin,Oswin_k_d*(aw_lin./(1-aw_lin)).^Oswin_n_d,'k-')
%% BET
i_fit = i_fit+1; % Iterate fit index
fitname = strcat(fitname,'BET'); % Name of fitting model
X0 = [0.1, 3]; % initial guesses for M0, c
lb = [0.01, 0.1]; % lower bounds for M0, c
ub = [10, 3000]; % upper bounds for M0, c

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[BET_x_s,resnorm(1,i_fit),residual_s(:,i_fit)] = lsqnonlin(@BET,X0,lb,ub,[],aw_sorp,M_sorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
[BET_x_d,resnorm(2,i_fit),residual_d(:,i_fit)] = lsqnonlin(@BET,X0,lb,ub,[],aw_desorp,M_desorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
BET_M0_s = BET_x_s(1);
BET_c_s = BET_x_s(2);
BET_M0_d = BET_x_d(1);
BET_c_d = BET_x_d(2);
parameter{1,i_fit} = {BET_x_s};
parameter{2,i_fit} = {BET_x_d};
parameter{3,i_fit} = {'M0','c'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot(aw_lin,BET_M0_s*BET_c_s.*aw_lin./((1-aw_lin)+(BET_c_s-1).*(1-aw_lin).*aw_lin),'r-')
figure(1)
subplot(1,2,2)
plot(aw_lin,BET_M0_d*BET_c_d.*aw_lin./((1-aw_lin)+(BET_c_d-1).*(1-aw_lin).*aw_lin),'r-')
%% GAB
i_fit = i_fit+1; % Iterate fit index
fitname = strcat(fitname,'GAB'); % Name of fitting model
X0 = [0.1, 0.8, 0.8]; % initial guesses for M0, K, C
lb = [0.01, 0.01, 0.01]; % lower bounds for M0, K, C
ub = [2, 10/9, 2]; % upper bounds for M0, K, C

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[GAB_x_s(1,:),resnorm(1,i_fit),residual_s(:,i_fit)] = lsqnonlin(@GAB,X0,lb,ub,[],aw_sorp,M_sorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
[GAB_x_d(1,:),resnorm(2,i_fit),residual_d(:,i_fit)] = lsqnonlin(@GAB,X0,lb,ub,[],aw_desorp,M_desorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
GAB_M0_s = GAB_x_s(1,1);
GAB_K_s = GAB_x_s(1,2);
GAB_C_s = GAB_x_s(1,3);
GAB_M0_d = GAB_x_d(1,1);
GAB_K_d = GAB_x_d(1,2);
GAB_C_d = GAB_x_d(1,3);
parameter{1,i_fit} = {GAB_x_s};
parameter{2,i_fit} = {GAB_x_d};
parameter{3,i_fit} = {'M0','K','C'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot(aw_lin,GAB_M0_s*GAB_K_s*GAB_C_s.*aw_lin./((1-GAB_K_s.*aw_lin).*(1+(GAB_C_s-1)*GAB_K_s.*aw_lin)),'b-')
figure(1)
subplot(1,2,2)
plot(aw_lin,GAB_M0_d*GAB_K_d*GAB_C_d.*aw_lin./((1-GAB_K_d.*aw_lin).*(1+(GAB_C_d-1)*GAB_K_d.*aw_lin)),'b-')
%% Halsey
i_fit = i_fit+1; % Iterate fit index
fitname = strcat(fitname,'Halsey'); % Name of fitting model
X0 = [0.05, 2]; % initial guesses for k, n
lb = [0.001, 0.5]; % lower bounds for k, n
ub = [1, 8]; % upper bounds for k, n

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[Halsey_x_s,resnorm(1,i_fit),residual_s(:,i_fit)] = lsqnonlin(@Halsey,X0,lb,ub,[],aw_sorp,M_sorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
[Halsey_x_d,resnorm(2,i_fit),residual_d(:,i_fit)] = lsqnonlin(@Halsey,X0,lb,ub,[],aw_desorp,M_desorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
Halsey_k_s = Halsey_x_s(1);
Halsey_n_s = Halsey_x_s(2);
Halsey_k_d = Halsey_x_d(1);
Halsey_n_d = Halsey_x_d(2);
parameter{1,i_fit} = {Halsey_x_s};
parameter{2,i_fit} = {Halsey_x_d};
parameter{3,i_fit} = {'k','n'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot(aw_lin,(-Halsey_k_s./log(aw_lin)).^(1/Halsey_n_s),'g-')
figure(1)
subplot(1,2,2)
plot(aw_lin,(-Halsey_k_d./log(aw_lin)).^(1/Halsey_n_d),'g-')
%% Chen
i_fit = i_fit+1; % Iterate fit index
fitname = strcat(fitname,'Chen'); % Name of fitting model
X0 = [-0.05, 8, 8]; % initial guesses for k, c, b
lb = [-1, 1, 1]; % lower bounds for k, c, b
ub = [-0.001, 10, 30]; % upper bounds for k, c, b

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[Chen_x_s,resnorm(1,i_fit),residual_s(2:end,i_fit)] = lsqnonlin(@Chen,X0,lb,ub,[],aw_sorp(2:end),M_sorp(2:end)); %Solve nonlinear least-squares (nonlinear data-fitting) problems
[Chen_x_d,resnorm(2,i_fit),residual_d(2:end,i_fit)] = lsqnonlin(@Chen,X0,lb,ub,[],aw_desorp(2:end),M_desorp(2:end)); %Solve nonlinear least-squares (nonlinear data-fitting) problems
Chen_k_s = Chen_x_s(1);
Chen_c_s = Chen_x_s(2);
Chen_b_s = Chen_x_s(3);
Chen_k_d = Chen_x_d(1);
Chen_c_d = Chen_x_d(2);
Chen_b_d = Chen_x_d(3);
parameter{1,i_fit} = {Chen_x_s};
parameter{2,i_fit} = {Chen_x_d};
parameter{3,i_fit} = {'k','c','b'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot(aw_lin,-1/Chen_b_s*log(1/Chen_c_s*(Chen_k_s-log(aw_lin))),'m-')
figure(1)
subplot(1,2,2)
plot(aw_lin,-1/Chen_b_d*log(1/Chen_c_d*(Chen_k_d-log(aw_lin))),'m-')
%% Chung-Pfost
i_fit = i_fit+1; % Iterate fit index
fitname = strcat(fitname,'Chung-Pfost'); % Name of fitting model
X0 = [6e+3, 10]; % initial guesses for k, c
lb = [1e+3, 1]; % lower bounds for k, c
ub = [1e+4, 300]; % upper bounds for k, c

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[Chung_Pfost_x_s,resnorm(1,i_fit),residual_s(2:end,i_fit)] = lsqnonlin(@Chung_Pfost,X0,lb,ub,[],aw_sorp(2:end),M_sorp(2:end)); %Solve nonlinear least-squares (nonlinear data-fitting) problems
[Chung_Pfost_x_d,resnorm(2,i_fit),residual_d(2:end,i_fit)] = lsqnonlin(@Chung_Pfost,X0,lb,ub,[],aw_desorp(2:end),M_desorp(2:end)); %Solve nonlinear least-squares (nonlinear data-fitting) problems
Chung_Pfost_k_s = Chung_Pfost_x_s(1);
Chung_Pfost_c_s = Chung_Pfost_x_s(2);
Chung_Pfost_k_d = Chung_Pfost_x_d(1);
Chung_Pfost_c_d = Chung_Pfost_x_d(2);
parameter{1,i_fit} = {Chung_Pfost_x_s};
parameter{2,i_fit} = {Chung_Pfost_x_d};
parameter{3,i_fit} = {'k','c'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot(aw_lin,-1/Chung_Pfost_c_s*log(-R*T/Chung_Pfost_k_s*log(aw_lin)),'c-')
figure(1)
subplot(1,2,2)
plot(aw_lin,-1/Chung_Pfost_c_d*log(-R*T/Chung_Pfost_k_d*log(aw_lin)),'c-')
%% Henderson
i_fit = i_fit+1; % Iterate fit index
fitname = strcat(fitname,'Henderson'); % Name of fitting model
X0 = [0.05, 2]; % initial guesses for k, n
lb = [0.001, 0.05]; % lower bounds for k. n
ub = [10, 8]; % upper bounds for k, n

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[Henderson_x_s,resnorm(1,i_fit),residual_s(:,i_fit)] = lsqnonlin(@Henderson,X0,lb,ub,[],aw_sorp,M_sorp,T); %Solve nonlinear least-squares (nonlinear data-fitting) problems
[Henderson_x_d,resnorm(2,i_fit),residual_2(:,i_fit)] = lsqnonlin(@Henderson,X0,lb,ub,[],aw_desorp,M_desorp,T); %Solve nonlinear least-squares (nonlinear data-fitting) problems
Henderson_k_s = Henderson_x_s(1);
Henderson_n_s = Henderson_x_s(2);
Henderson_k_d = Henderson_x_d(1);
Henderson_n_d = Henderson_x_d(2);
parameter{1,i_fit} = {Henderson_x_s};
parameter{2,i_fit} = {Henderson_x_d};
parameter{3,i_fit} = {'k','n'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot(aw_lin,(-log(1-aw_lin)/(Henderson_k_s*T)).^(1/Henderson_n_s),'b--')
figure(1)
subplot(1,2,2)
plot(aw_lin,(-log(1-aw_lin)/(Henderson_k_d*T)).^(1/Henderson_n_d),'b--')
%% Caurie
i_fit = i_fit+1; % Iterate fit index
fitname = strcat(fitname,'Caurie'); % Name of fitting model
X0 = [1, 1]; % initial guesses for M0, C
lb = [0.001, 0.05]; % lower bounds for M0, C
ub = [10, 8]; % upper bounds for M0, C

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[Caurie_x_s,resnorm(1,i_fit),residual_s(:,i_fit)] = lsqnonlin(@Caurie,X0,lb,ub,[],aw_sorp,M_sorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
[Caurie_x_d,resnorm(2,i_fit),residual_d(:,i_fit)] = lsqnonlin(@Caurie,X0,lb,ub,[],aw_desorp,M_desorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
Caurie_M0_s = Caurie_x_s(1);
Caurie_C_s = Caurie_x_s(2);
Caurie_M0_d = Caurie_x_d(1);
Caurie_C_d = Caurie_x_d(2);
parameter{1,i_fit} = {Caurie_x_s};
parameter{2,i_fit} = {Caurie_x_d};
parameter{3,i_fit} = {'M0','C'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot(aw_lin,(2/Caurie_M0_s/Caurie_C_s*((1-aw_lin)./aw_lin).^(2*Caurie_C_s/Caurie_M0_s)).^(-1),'y--')
figure(1)
subplot(1,2,2)
plot(aw_lin,(2/Caurie_M0_d/Caurie_C_d*((1-aw_lin)./aw_lin).^(2*Caurie_C_d/Caurie_M0_d)).^(-1),'y--')
%% SIPS
i_fit = i_fit+1; % Iterate fit index
fitname = strcat(fitname,'SIPS'); % Name of fitting model
X0 = [0.05, 2, 0.5]; % initial guesses for Ks, N, C
lb = [0.001, 0, -2]; % lower bounds for Ks, N, C
ub = [10, 8, 3]; % upper bounds for Ks, N, C

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[SIPS_x_s,resnorm(1,i_fit),residual_s(:,i_fit)] = lsqnonlin(@SIPS,X0,lb,ub,[],aw_sorp,M_sorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
[SIPS_x_d,resnorm(2,i_fit),residual_d(:,i_fit)] = lsqnonlin(@SIPS,X0,lb,ub,[],aw_desorp,M_desorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
SIPS_Ks_s = SIPS_x_s(1);
SIPS_N_s = SIPS_x_s(2);
SIPS_C_s = SIPS_x_s(3);
SIPS_Ks_d = SIPS_x_d(1);
SIPS_N_d = SIPS_x_d(2);
SIPS_C_d = SIPS_x_d(3);
parameter{1,i_fit} = {SIPS_x_s};
parameter{2,i_fit} = {SIPS_x_d};
parameter{3,i_fit} = {'Ks','N','C'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot(aw_lin,SIPS_Ks_s*aw_lin.^SIPS_N_s./(1+SIPS_C_s*aw_lin.^SIPS_N_s),'m--')
figure(1)
subplot(1,2,2)
plot(aw_lin,SIPS_Ks_d*aw_lin.^SIPS_N_d./(1+SIPS_C_d*aw_lin.^SIPS_N_d),'m--')
%% Iglesias-Chirife
i_fit = i_fit+1; % Iterate fit index
fitname = strcat(fitname,'Iglesias-Chirife'); % Name of fitting model
X0 = [1, 1]; % initial guesses for k, c
lb = [0.001, -10]; % lower bounds for k, c
ub = [1000, 8]; % upper bounds for k, c

% M_half the moisture content (d.b.) at a water activity of 0.5
M_half_sorp = M_sorp(6);
M_half_desorp = M_desorp(6);

% Perform non-linear least squares fitting to model (requires model
% function in directory)
[Iglesias_Chirife_x_s,resnorm(1,i_fit),residual_s(:,i_fit)] = lsqnonlin(@Iglesias_Chirife,X0,lb,ub,[],aw_sorp,M_sorp,M_half_sorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
[Iglesias_Chirife_x_d,resnorm(2,i_fit),residual_2(:,i_fit)] = lsqnonlin(@Iglesias_Chirife,X0,lb,ub,[],aw_desorp,M_desorp,M_half_desorp); %Solve nonlinear least-squares (nonlinear data-fitting) problems
Iglesias_Chirife_k_s = Iglesias_Chirife_x_s(1);
Iglesias_Chirife_c_s = Iglesias_Chirife_x_s(2);
Iglesias_Chirife_k_d = Iglesias_Chirife_x_d(1);
Iglesias_Chirife_c_d = Iglesias_Chirife_x_d(2);
parameter{1,i_fit} = {Iglesias_Chirife_x_s};
parameter{2,i_fit} = {Iglesias_Chirife_x_d};
parameter{3,i_fit} = {'k','c'};

% Add fit to figure
figure(1)
subplot(1,2,1)
plot((log(M_lin+(M_lin.^2+M_half_sorp).^0.5)-Iglesias_Chirife_c_s)/Iglesias_Chirife_k_s,M_lin,'c--')
figure(1)
subplot(1,2,2)
plot((log(M_lin+(M_lin.^2+M_half_desorp).^0.5)-Iglesias_Chirife_c_d)/Iglesias_Chirife_k_d,M_lin,'c--')
%%
subplot(1,2,1)
title('Sorption Isotherm')
xlabel('Water Activity')
ylabel('Moisture Mass d.b.')
legend('raw data',fitname{1}{:},'Location','northwest')

subplot(1,2,2)
title('Desorption Isotherm')
xlabel('Water Activity')
ylabel('Moisture Mass d.b.')
legend('raw data',fitname{1}{:},'Location','northwest')

min_error_s = resnorm(1,resnorm(1,:) == min(resnorm(1,:)));
min_error_d = resnorm(2,resnorm(2,:) == min(resnorm(2,:)));
best_model_s = fitname{1}{find(resnorm(1,:) == min(resnorm(1,:)))};
best_model_d = fitname{1}{find(resnorm(2,:) == min(resnorm(2,:)))};
best_parameters_s = parameter{1,find(resnorm(1,:) == min(resnorm(1,:)))}{1};
best_parameters_d = parameter{2,find(resnorm(2,:) == min(resnorm(2,:)))}{1};

output_message = sprintf('The best fit to the sorption isotherm is %s with a residual error of %d\nIts fitting parameters are',best_model_s,min_error_s);
for j = 1:size(best_parameters_s,2)
    output_message = strcat(output_message,sprintf('\n%s = %d',parameter{3,find(resnorm(1,:) == min(resnorm(1,:)))}{j},best_parameters_s(j)));
end
output_message=strcat(output_message,sprintf('\nThe best fit to the desorption isotherm is %s with a residual error of %d\nIts fitting parameters are',best_model_d,min_error_d));
for j = 1:size(best_parameters_d,2)
    output_message = strcat(output_message,sprintf('\n%s = %d',parameter{3,find(resnorm(2,:) == min(resnorm(2,:)))}{j},best_parameters_d(j)));
end
disp(output_message)

save(strcat(excelname,'.mat'),'parameter','output_message','resnorm')
savefig(figure(1),strcat(excelname,'.fig'))